Dokumentáció legkisebb körbefoglaló poligon szimulált lehűtéssel:

Ez a program a szimulált lehűtés (Simulated Annealing) algoritmust implementálja a minimális kerületű poligonok keresésére, 
amelyek tartalmazzák a megadott pontokat. Az alkalmazás grafikus felhasználói felülettel (GUI) rendelkezik, és lehetőséget biztosít 
fájlok betöltésére, valamint a számítások indítására. Az algoritmus célja, hogy egy adott pontkészlethez legjobban illeszkedő, 
minimális kerületű konvex poligont találjon.

2. Fő Funkciók

Fájlbetöltés: A felhasználó kiválaszthat egy .txt fájlt, amely a pontokat tartalmazza. A fájl formátuma:

Az első két sor tartalmazza a N és K értékeket (pontok száma és a keresett poligon csúcspontjainak száma).

A következő sorokban a pontok koordinátái (x, y) vannak, vesszővel elválasztva.

Számítás Indítása: A felhasználó indíthatja a számításokat, amelyek a szimulált lehűtés algoritmus segítségével próbálják 
megtalálni a legjobb poligont.

Eredmények és Ábrázolás: Az alkalmazás megjeleníti a legjobb poligont és annak eredményeit egy PictureBox vezérlőben. Az 
eredményeket szöveges formában is megjeleníti egy ListBox-ban.

3. Algoritmus

A szimulált lehűtés (Simulated Annealing) egy globális optimalizációs algoritmus, amely a következő lépéseken keresztül működik:

Hőmérsékletfüggvény: Az iterációk során a hőmérséklet exponenciálisan csökken. A kezdeti hőmérséklet 1000, a végső hőmérséklet 
0.1.

static float TemperatureFunction(int iteration, int maxIterations)
{
    return initialTemperature * (float)Math.Pow(finalTemperature / initialTemperature, (float)iteration / maxIterations);
}

Elfogadási valószínűség: A hibás lépések elfogadása egy Boltzmann-függvény szerint történik. Ha a változás pozitív 
(jobb eredményt hoz), akkor minden esetben elfogadjuk az új állapotot. Ha nem, akkor egy véletlenszám alapján döntjük el, 
hogy elfogadjuk-e a rosszabb állapotot.


static double AcceptanceProbability(float delta, float temperature)
{
    return Math.Exp(-delta / temperature);
}

Véletlenszerű lépések: A lépéseket véletlenszerűen generált szomszédos pontok módosításával hajtjuk végre. A szomszédos 
pontokat a következő módon generáljuk: balra, jobbra, felfelé és lefelé egy kis epsilon értékű eltolással.

static IEnumerable<PointF> GenerateNeighbors(PointF point, float epsilon)
{
    yield return new PointF(point.X + epsilon, point.Y);
    yield return new PointF(point.X - epsilon, point.Y);
    yield return new PointF(point.X, point.Y + epsilon);
    yield return new PointF(point.X, point.Y - epsilon);
}

4. Módszerek és Funkciók

LoadPointsFromFile: Betölti a fájlból a pontokat és a szükséges paramétereket (N, K).

InitializePolygon: 

Inicializálja a poligont úgy, hogy annak csúcsai körül helyezkednek el, és az átlagos középpont köré 
helyezkednek el egy kört.

SimulatedAnnealing: 

A fő algoritmus, amely iterációkban próbálja optimalizálni a poligon kerületét, figyelembe véve a 
szomszédos pontok véletlenszerű módosítását és a hőmérséklet csökkenését.

DrawPolygonAndPoints:
 
A poligon és a pontok megjelenítése a GUI-n a PictureBox vezérlő segítségével.

5. Felhasználói Felület

ButtonLoadFile: 

A felhasználó fájlt választhat, amely tartalmazza a pontokat és a paramétereket.

ButtonCalculate: 

A számításokat elindítja, és megjeleníti a legjobb poligont.

ListBoxResults: 

A számítások eredményei, mint például a legjobb poligon pontjai és kerülete, itt jelennek meg.

PictureBox: 

A poligon és a pontok vizuális megjelenítése.

6. Követelmények és Korlátozások

A fájl formátuma pontosan meghatározott.

A program a poligonok számának megfelelően (K csúcs) dolgozik, és az optimális poligon megtalálása iterációk során történik.

A program biztosítja, hogy minden pont benne legyen a poligonban, amennyiben az algoritmus sikeresen végrehajtódik.

7. Jövőbeli Fejlesztések

A program képes lenne dinamikusan változtatni az epsilon értéket, amely a lépések méretét befolyásolja.

A program további optimalizálási módszereket is alkalmazhat a jobb eredmény érdekében.

8. Használati Példa

Nyisd meg a programot.

Kattints a Load File gombra, és válassz egy fájlt, amely pontokat tartalmaz.

Kattints a Calculate gombra a számítások elindításához.

A legjobb poligon és a hozzá tartozó eredmények megjelennek a GUI-n.

Ez a dokumentáció segít megérteni a program működését és a szimulált lehűtés módszerét, amelyet a poligon 
optimalizálására alkalmaz.